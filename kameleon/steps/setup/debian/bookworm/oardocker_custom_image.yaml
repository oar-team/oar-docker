## Customize oarcluster image

- skel_directory: $${kameleon_data_dir}/skel

- configure_apt:
  - local2in:
    - $${kameleon_data_dir}/$${apt_sources_file}
    - /etc/apt/sources.list
  - local2in:
    - $${kameleon_data_dir}/apt-preferences
    - /etc/apt/preferences
  - exec_in: sed -ri 's/ stable/ $${release}/g' /etc/apt/sources.list
  - exec_in: sed -ri 's/stable/$${release}/g' /etc/apt/preferences
  - exec_in: apt-get update

- get_debian_version:
    - exec_in: IFS='.' read VERSION VERSION_MINOR < /etc/debian_version

- install_ruby_rest_client:
  - exec_in: |
      if [ ${VERSION} = '8' ]; then
        gem install --verbose rest-client
      fi

- copy_default_skel:
    - exec_in: rm -rf /etc/skel
    - exec_in: mkdir -p /etc/skel
    - pipe:
      - exec_local: tar -cf - -C $${skel_directory} .
      - exec_in: tar xfp - -C /etc/skel

- configure_root:
  - exec_in: rsync -avh /etc/skel/ /root
  - exec_in: chown -R root:root /root

## User
- create_group:
  - exec_in: |
      if grep -q $${user_name} /etc/group
      then
           echo "group $${user_name} already exists."
      else
           groupadd $${user_name}
      fi

- add_user:
  # use the create_passwd.py script to generate the crypted password
  - exec_in: |
      if id $${user_name} >& /dev/null
      then
           echo "user $${user_name} already exists."
      else
           useradd -m -g $${user_name} -s /bin/bash $${user_name}
      fi
  - exec_in: adduser $${user_name} sudo
  - exec_in: echo -n '$${user_name}:$${user_name}' | chpasswd

- configure_user:
  - exec_in: rsync -avh /etc/skel/ /home/$${user_name}

- enable_passwordless_sudo:
  - exec_in: cp /etc/sudoers /etc/sudoers.orig
  - exec_in: sed -i.bkp -e 's/%sudo\s\+ALL=(ALL\(:ALL\)\?)\s\+ALL/%sudo ALL=NOPASSWD:ALL/g' /etc/sudoers

- fix_permission:
  - on_export_init:
    - exec_in: chown -R $${user_name}:$${user_name} /home/$${user_name}

- set_python3_as_default_python:
  - exec_in: ln -sf $(which python3) /usr/local/bin/python
  - exec_in: ln -sf $(which pip3) /usr/local/bin/pip

- python_dev_packages_pip: >
    pdbpp ptpython grin tox httpie chandler

- python_dev_packages_apt: >
    python3-ipython python3-termcolor python3-pytest python3-virtualenv python3-flask python3-sqlalchemy python3-click python3-jedi

- install_python_dev_tools:
  - exec_in: apt-get install -y $${python_dev_packages_apt}
  - exec_in: pip3 install --break-system-packages -U $${python_dev_packages_pip}

- delete_systemd_services:
  - exec_in: |
      cd /lib/systemd/system/sysinit.target.wants/
      ls | grep -v systemd-tmpfiles-setup | xargs rm -f || true

  - exec_in: rm -f /lib/systemd/system/multi-user.target.wants/*
  - exec_in: rm -f /etc/systemd/system/*.wants/*
  - exec_in: rm -f /lib/systemd/system/local-fs.target.wants/*
  - exec_in: rm -f /lib/systemd/system/sockets.target.wants/*udev*
  - exec_in: rm -f /lib/systemd/system/sockets.target.wants/*initctl*
  - exec_in: rm -f /lib/systemd/system/basic.target.wants/*
  - exec_in: rm -f /lib/systemd/system/anaconda.target.wants/*
  - exec_in: rm -f /lib/systemd/system/plymouth*
  - exec_in: rm -f /lib/systemd/system/systemd-update-utmp*

- disable_all_sysvinit_services:
  - exec_in: |
      ls /etc/init.d/* | \
        xargs -I {} basename {} | \
        xargs -I {} bash -c "echo Disable: {}; systemctl disable {} 2> /dev/null || true"

- mask_systemd_services:
  # - exec_in: systemctl mask -- systemd-tmpfiles-setup.service
  - exec_in: systemctl mask -- -.mount
  - exec_in: systemctl mask -- dev-mqueue.mount
  - exec_in: systemctl mask -- etc-hostname.mount
  - exec_in: systemctl mask -- etc-hosts.mount
  - exec_in: systemctl mask -- etc-resolv.conf.mount
  - exec_in: systemctl mask -- systemd-ask-password-console.path
  - exec_in: systemctl mask -- systemd-ask-password-wall.path
  - exec_in: systemctl mask -- init.scope
  - exec_in: systemctl mask -- networking.service
  - exec_in: systemctl mask -- systemd-modules-load.service
  - exec_in: systemctl mask -- systemd-sysctl.service
  - exec_in: systemctl mask -- systemd-tmpfiles-setup-dev.service
  - exec_in: systemctl mask -- systemd-udevd.service
  - exec_in: systemctl mask -- systemd-update-utmp.service
  - exec_in: systemctl mask -- systemd-user-sessions.service
  - exec_in: systemctl mask -- systemd-initctl.socket
  - exec_in: systemctl mask -- systemd-udevd-control.socket
  - exec_in: systemctl mask -- systemd-udevd-kernel.socket
  - exec_in: systemctl mask -- cryptsetup.target
  - exec_in: systemctl mask -- getty.target
  - exec_in: systemctl mask -- local-fs.target
  - exec_in: systemctl mask -- multi-user.target
  - exec_in: systemctl mask -- network-online.target
  - exec_in: systemctl mask -- network.target
  - exec_in: systemctl mask -- swap.target
  - exec_in: systemctl mask -- basic.target
  - exec_in: systemctl mask -- console-getty.service
  - exec_in: systemctl mask -- display-manager.service
  - exec_in: systemctl mask -- getty-static.service
  - exec_in: systemctl mask -- getty\@tty1.service
  - exec_in: systemctl mask -- hwclock-save.service
  - exec_in: systemctl mask -- ondemand.service
  - exec_in: systemctl mask -- systemd-logind.service
  - exec_in: systemctl mask -- systemd-remount-fs.service
  - exec_in: systemctl mask -- sysinit.target

- set_default_systemd_targets:
  - exec_in: ln -sf /lib/systemd/system/halt.target /etc/systemd/system/sigpwr.target

- cleanup:
  - on_setup_clean:
    - exec_in: apt-get purge -y --auto-remove
    - exec_in: rm -f /etc/dpkg/dpkg.cfg.d/02apt-speedup
    - exec_in: rm -rf /tmp/* /var/tmp/*
    - exec_in: rm -rf /var/lib/apt/lists/*
    - exec_in: rm -rf /var/cache/*
    # - exec_in: rm -f /etc/ssh/ssh_host_*
    - exec_in: rm -rf /root/.cache
    - exec_in: rm -rf /var/cache/debconf/*-old
    - exec_in: rm -rf /var/lib/apt/lists/*
